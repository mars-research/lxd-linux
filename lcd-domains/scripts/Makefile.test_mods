#
# test modules/examples build
#
# This is included in the top-level Makefile, and some
# variables are defined there.
# 

LCD_TEST_MODULES_DIR=$(PWD)/test_mods
export LCD_TEST_MODULES_DIR

LCD_TEST_MODULES_BUILD_DIR=$(LCD_BUILD_DIR)/test_mods
export LCD_TEST_MODULES_BUILD_DIR

# Collect all of the example directories and kbuilds
TEST_MODULES_DIRS=$(shell cd $(LCD_TEST_MODULES_DIR) && \
	find . -mindepth 1 -type d)
TEST_MODULES_KBUILDS=$(shell cd $(LCD_TEST_MODULES_DIR) && \
	find . -name "Kbuild")

TEST_MODULES_BUILD_DIRS=$(foreach dir,$(TEST_MODULES_DIRS), \
	$(LCD_TEST_MODULES_BUILD_DIR)/$(dir))
TEST_MODULES_BUILD_KBUILDS=$(foreach kb,$(TEST_MODULES_KBUILDS), \
	$(LCD_TEST_MODULES_BUILD_DIR)/$(kb))

KLIBLCD_SYMBOLS=$(MICROKERNEL_BUILD_DIR)/Module.symvers

# ------------------------------------------------------------
# CFLAGS for each build configuration

export NONISOLATED_CFLAGS=$(MICROKERNEL_CFLAGS)
export ISOLATED_CFLAGS=$(LIBLCD_CFLAGS)
export DEKER_CFLAGS=$(LIBDEKER_CFLAGS)

# ------------------------------------------------------------
# LIBLCD

LIBLCD_PATH_CMD=$(shell scripts/relpath.py $(LIBLCD_BUILD_DIR)/liblcd.a $(shell dirname $(shell readlink -f $@)))

# ------------------------------------------------------------
# LIBDEKER

ifneq ($(DEKER),)

# We use the clang-compiled version of liblcd, and libdeker. They are
# listed in the link order: libdeker liblcd so that the linker will choose
# the weak symbols from libdeker over the same symbols in liblcd.

LIBDEKER_PATH_CMD=$(shell scripts/relpath.py $(LIBDEKER_BUILD_DIR)/libdeker.a $(shell dirname $(shell readlink -f $@))) $(shell scripts/relpath.py $(LIBDEKER_BUILD_DIR)/liblcd_build/liblcd.a $(shell dirname $(shell readlink -f $@)))

LIBDEKER_RUNTIME_PATH_CMD=$(shell scripts/relpath.py $(LIBDEKER_BUILD_DIR)/libdeker/deker_rt.o $(shell dirname $(shell readlink -f $@))) $(shell scripts/relpath.py $(LIBDEKER_BUILD_DIR)/libdeker/smack.o $(shell dirname $(shell readlink -f $@)))

MAYBE_LIBDEKER=$(LIBDEKER_BUILD_DIR)/libdeker.a

endif

# ------------------------------------------------------------
# Targets

ifneq ($(DEKER),)

test_mods_deker: test_mods
	@echo "  DEKER MODPOST"
	@scripts/deker_mod_post.sh test_mods/config \
	$(WLLVM_EXTRACT_BC_PATH)

else

test_mods_deker: test_mods

endif

test_mods: $(LCD_TEST_MODULES_BUILD_DIR)/Kbuild \
	$(LCD_TEST_MODULES_BUILD_DIR)/Kbuild.config \
	$(TEST_MODULES_BUILD_KBUILDS) | \
	$(TEST_MODULES_BUILD_DIRS)
	$(MAKE) -C .. M=$(LCD_TEST_MODULES_BUILD_DIR) \
	KBUILD_EXTRA_SYMBOLS=$(KLIBLCD_SYMBOLS) $(MAKEFLAGS)

$(LCD_TEST_MODULES_BUILD_DIR)/%/Kbuild: $(LCD_TEST_MODULES_DIR)/%/Kbuild | \
	$(TEST_MODULES_BUILD_DIRS)
	@echo "  KBUILD     $^"
	@printf "#\n# BEGIN: Auto-generated part.\n#\n" > $@ && \
	printf "\n" >> $@ && \
	printf "LIBDEKER=$(LIBDEKER_PATH_CMD)\n" >> $@ && \
	printf "LIBDEKER_RUNTIME=$(LIBDEKER_RUNTIME_PATH_CMD)\n" >> $@ && \
	printf "LIBLCD=$(LIBLCD_PATH_CMD)\n" >> $@ && \
	printf "src=$(shell dirname `readlink -f $<`)\n" >> $@ && \
	printf "\n" >> $@ && \
	printf "#\n# END: Auto-generated part.\n#\n" >> $@ && \
	printf "\n" >> $@ && \
	cat $^ >> $@

$(LCD_TEST_MODULES_BUILD_DIR)/Kbuild: scripts/Kbuild.test_mods \
	$(LCD_TEST_MODULES_BUILD_DIR)/Kbuild.config | \
	$(TEST_MODULES_BUILD_DIRS)
	cp scripts/Kbuild.test_mods $(LCD_TEST_MODULES_BUILD_DIR)/Kbuild

$(LCD_TEST_MODULES_BUILD_DIR)/Kbuild.config: test_mods/config | \
	$(TEST_MODULES_BUILD_DIRS)
	cat test_mods/config | awk -f scripts/conf.awk > $@

test_mods/config:
	cp scripts/defaultconfig test_mods/config

$(TEST_MODULES_BUILD_DIRS):
	@echo "  MKDIR      $@"
	@mkdir -p $@

clean-test_mods:
	if test -e $(LCD_TEST_MODULES_BUILD_DIR)/Kbuild; then \
		$(MAKE) -C .. M=$(LCD_TEST_MODULES_BUILD_DIR) clean; \
	fi

clean: clean-test_mods

.PHONY: \
	test_mods \
	clean-test_mods
