#
# libdeker build setup
#
# This is included in the top-level Makefile, and some variables
# are set there.
#

CLANG_PATH=clang
export LLVM_COMPILER=$(CLANG_PATH)

WLLVM_DIR=/home/charlie/work/flux/wllvm
export WLLVM_DIR

LIBDEKER_BUILD_DIR=$(LCD_BUILD_DIR)/libdeker_build
export LIBDEKER_BUILD_DIR

LIBDEKER_WEAK_ATTR=\"__attribute__((weak))\"

LIBDEKER_BASE_CFLAGS=\
	$(LCD_DOMAINS_CFLAGS) \
	-I$(LCD_DOMAINS_TOP_SRC_DIR)/include \
	-I$(LCD_DOMAINS_TOP_SRC_DIR)/arch/$(ARCH)/include \
	-I$(LCD_DOMAINS_TOP_SRC_DIR)/config/isolated \
	-DCONFIG_LAZY_THC \
	-DMODULE \
	-DLCD_ISOLATE \
	-DCPTR_CACHE_LOCK_PADDING_SIZE=8 \
	-DDEKER

LIBDEKER_CFLAGS= \
	$(LIBDEKER_BASE_CFLAGS) \
	-I$(LIBDEKER_BUILD_DIR)/libcap.install/include \
	-I$(LIBDEKER_BUILD_DIR)/libfipc.install/include \
	-I$(LIBDEKER_BUILD_DIR)/libasync.install/include \
        -DLIBDEKER_FUNC_ATTR=$(LIBDEKER_WEAK_ATTR)

LIBDEKER_BAD_CFLAGS= \
	-fno-delete-null-pointer-checks \
	-mpreferred-stack-boundary=3 \
	-maccumulate-outgoing-args \
	-fconserve-stack \
	-Wno-unused-but-set-variable \
	-mtune=generic \
	-DCC_HAVE_ASM_GOTO

export LIBDEKER_CFLAGS LIBDEKER_BAD_CFLAGS

LIBDEKER_DIRS=$(shell cd libdeker && find . -mindepth 1 -type d)
LIBDEKER_DIRS:=$(foreach d,$(LIBDEKER_DIRS),libdeker/$(d))
LIBDEKER_DIRS:= \
	$(LIBDEKER_DIRS) \
	libcap.build \
	libcap.install \
	libfipc.build \
	libfipc.install \
	libasync.build \
	libasync.install \
	common
LIBDEKER_BUILD_DIRS=$(foreach dir,$(LIBDEKER_DIRS),\
	$(LIBDEKER_BUILD_DIR)/$(dir))

LIBDEKER_LIBCAP=$(LIBDEKER_BUILD_DIR)/libcap.install/lib/libcap.a
LIBDEKER_LIBFIPC=$(LIBDEKER_BUILD_DIR)/libfipc.install/lib/libfipc.a
LIBDEKER_LIBFIPC=$(LIBDEKER_BUILD_DIR)/libasync.install/lib/libasync.a

LIBDEKER_LIB_CFLAGS= $(LIBDEKER_BASE_CFLAGS)

# There isn't a nice easy way to multiline this, and I want access to the
# LIBDEKER_BUILD_DIR variable (so I don't want to create a separate file); so 
# I mash this in one line for now.
LIBDEKER_AR_SCRIPT="CREATE $(LIBDEKER_BUILD_DIR)/libdeker.a\nADDLIB $(LIBDEKER_BUILD_DIR)/lib.a\nADDLIB $(LIBDEKER_BUILD_DIR)/libcap.install/lib/libcap.a\nADDLIB $(LIBDEKER_BUILD_DIR)/libfipc.install/lib/libfipc.a\nADDLIB $(LIBDEKER_BUILD_DIR)/libasync.install/lib/libasync.a\nSAVE\nEND\n"

libdeker.bc: libdeker
	$(WLLVM_DIR)/extract-bc $(LIBDEKER_BUILD_DIR)/libdeker.a

libdeker: $(LIBDEKER_BUILD_DIR)/lib.a | $(LIBDEKER_LIBCAP) $(LIBDEKER_LIBFIPC) \
	$(LIBDEKER_LIBASYNC)
	@echo "  AR      $@"
	@echo $(LIBDEKER_AR_SCRIPT) | ar -M

$(LIBDEKER_BUILD_DIR)/lib.a: $(LIBDEKER_BUILD_DIR)/Kbuild | \
	$(LIBDEKER_BUILD_DIRS)
	$(MAKE) -C .. M=$(LIBDEKER_BUILD_DIR) $(MAKEFLAGS)

libcap.libdeker: $(LIBLCD_BUILD_DIR)/libcap.build/Makefile
	$(MAKE) -C $(LIBLCD_BUILD_DIR)/libcap.build \
	CC=$(WLLVM_DIR)/wllvm \
	CFLAGS="$(LIBLCD_LIB_CFLAGS)" $(MAKEFLAGS) && \
	$(MAKE) -C $(LIBLCD_BUILD_DIR)/libcap.build install $(MAKEFLAGS)

$(LIBDEKER_BUILD_DIR)/libcap.build/Makefile: libcap/configure | \
	$(LIBDEKER_BUILD_DIRS)
	cd $(LIBDEKER_BUILD_DIR)/libcap.build && \
	$(LCD_DOMAINS_TOP_SRC_DIR)/libcap/configure \
	PLATFORM=kernel --disable-test-build \
	--disable-kernel-module \
	--with-kernel-headers=$(LCD_DOMAINS_TOP_SRC_DIR)/.. \
	--prefix=$(LIBDEKER_BUILD_DIR)/libcap.install \
	CSPACE_DEPTH_BITS=$(LCD_CSPACE_DEPTH_BITS) \
	CSPACE_CNODE_TABLE_BITS=$(LCD_CSPACE_CNODE_TABLE_BITS) \
	CC=$(WLLVM_DIR)/wllvm

libfipc.libdeker: $(LIBDEKER_BUILD_DIR)/libfipc.build/Makefile
	$(MAKE) -C $(LIBDEKER_BUILD_DIR)/libfipc.build \
	CC=$(WLLVM_DIR)/wllvm \
	CFLAGS="$(LIBDEKER_LIB_CFLAGS) -I$(LIBDEKER_BUILD_DIR)/libcap.install/include" $(MAKEFLAGS) && \
	$(MAKE) -C $(LIBDEKER_BUILD_DIR)/libfipc.build install $(MAKEFLAGS)

$(LIBDEKER_BUILD_DIR)/libfipc.build/Makefile: \
	libasync/fast-ipc-module/configure | \
	$(LIBDEKER_BUILD_DIRS)
	cd $(LIBDEKER_BUILD_DIR)/libfipc.build && \
	$(LCD_DOMAINS_TOP_SRC_DIR)/libasync/fast-ipc-module/configure \
	--with-kernel-headers=$(LCD_DOMAINS_TOP_SRC_DIR)/.. \
	--prefix=$(LIBDEKER_BUILD_DIR)/libfipc.install \
	CC=$(WLLVM_DIR)/wllvm

libasync.libdeker: $(LIBDEKER_BUILD_DIR)/libasync.build/Makefile
	$(MAKE) -C $(LIBDEKER_BUILD_DIR)/libasync.build \
	CC=$(WLLVM_DIR)/wllvm \
	CFLAGS="$(LIBDEKER_LIB_CFLAGS) -I$(LIBDEKER_BUILD_DIR)/libcap.install/include -I$(LIBDEKER_BUILD_DIR)/libfipc.install/include -DNDEBUG" $(MAKEFLAGS) && \
	$(MAKE) -C $(LIBDEKER_BUILD_DIR)/libasync.build install $(MAKEFLAGS)

$(LIBDEKER_BUILD_DIR)/libasync.build/Makefile: libasync/configure | \
	$(LIBDEKER_BUILD_DIRS)
	cd $(LIBDEKER_BUILD_DIR)/libasync.build && \
	$(LCD_DOMAINS_TOP_SRC_DIR)/libasync/configure \
	--with-kernel-headers=$(LCD_DOMAINS_TOP_SRC_DIR)/.. \
	--with-libfipc=$(LIBDEKER_BUILD_DIR)/libfipc.install \
	--prefix=$(LIBDEKER_BUILD_DIR)/libasync.install \
	CC=$(WLLVM_DIR)/wllvm

$(LIBDEKER_BUILD_DIR)/Kbuild: scripts/Kbuild.libdeker | \
	$(LIBDEKER_BUILD_DIRS)
	cp scripts/Kbuild.libdeker $(LIBDEKER_BUILD_DIR)/Kbuild

$(LIBDEKER_BUILD_DIRS):
	@echo "  MKDIR      $@"
	@mkdir -p $@

clean-libdeker: clean-libdeker-libcap clean-libdeker-libfipc \
                clean-libdeker-libasync
	if test -e $(LIBDEKER_BUILD_DIR)/Kbuild; then \
		$(MAKE) -C .. M=$(LIBDEKER_BUILD_DIR) clean; \
	fi

clean-libdeker-lib%:
	if test -d $(LIBLCD_BUILD_DIR)/$(subst clean-libdeker-,,$@).build; then \
		$(MAKE) -C $(LIBLCD_BUILD_DIR)/$(subst clean-libdeker-,,$@).build clean; \
	fi
	rm -rf $(LIBDEKER_BUILD_DIR)/$(subst clean-libdeker-,,$@).install

clean += clean-libdeker

.PHONY += \
	libdeker \
	libcap.libdeker \
	libfipc.libdeker \
	libasync.libdeker \
	clean-libdeker

