#
# libdeker build setup
#
# This is included in the top-level Makefile, and some variables
# are set there.
#

CLANG_PATH ?= clang
export LLVM_COMPILER=$(CLANG_PATH)

WLLVM_PATH ?= wllvm
export WLLVM_PATH

WLLVM_EXTRACT_BC_PATH ?= extract-bc

SMACK_INCLUDE_PATH ?= /usr/local/share/smack/include
SMACK_LIB_PATH ?= /usr/local/share/smack/lib

LIBDEKER_BUILD_DIR=$(LCD_BUILD_DIR)/libdeker_build
export LIBDEKER_BUILD_DIR

LIBDEKER_WEAK_ATTR='__attribute__((weak))'

# We need to turn off the -Wuninitialized error. The uninitialized() macro
# defined in include/linux/compiler-gcc.h doesn't work with clang.

# Turn off -Wpointer-sign error. This ignores pointer casts like:
#     char *y = ...
#     unsigned char *x = (unsigned char *)y;

# Turn off -Wgnu-variable-sized-type-not-at-end. gcc allows variable-sized
# types to *not* be at the end of a struct, but clang/normal C doesn't.

# Turn off -Wunused-function. clang warns about unused static inlines, but
# gcc doesn't. There's enough of them that it's easier for now just to turn
# off this warning.

# Turn off -Wtautological-compare. clang warns of comparisons that are
# always true/false.

# Turn off -Wundef. Smack uses some undefined macros in the wrong way and
# clang complains.

LIBDEKER_BASE_CFLAGS=\
	$(LCD_DOMAINS_CFLAGS) \
	-I$(LCD_DOMAINS_TOP_SRC_DIR)/include \
	-I$(LCD_DOMAINS_TOP_SRC_DIR)/arch/$(ARCH)/include \
	-I$(LCD_DOMAINS_TOP_SRC_DIR)/config/isolated \
	-I$(SMACK_INCLUDE_PATH) \
	-DCONFIG_LAZY_THC \
	-DMODULE \
	-DLCD_ISOLATE \
	-DCPTR_CACHE_LOCK_PADDING_SIZE=8 \
	-DDEKER=1 \
	-Wno-uninitialized \
	-Wno-pointer-sign \
	-Wno-gnu-variable-sized-type-not-at-end \
	-Wno-unused-function \
	-Wno-tautological-compare \
	-Wno-undef \
	-DHAVE_INLINE \
	-DHAVE_BUILTIN_EXPECT \
	-DHAVE_BUILTIN_MEMCPY \
	-DHAVE_BUILTIN_VA_START \
	-DHAVE_BUILTIN_OBJECT_SIZE \
        -DLIBDEKER_FUNC_ATTR=$(LIBDEKER_WEAK_ATTR) \
	-DLIBLCD_FUNC_ATTR=$(LIBDEKER_WEAK_ATTR)


LIBDEKER_CFLAGS= \
	$(LIBDEKER_BASE_CFLAGS) \
	-I$(LIBDEKER_BUILD_DIR)/libcap.install/include \
	-I$(LIBDEKER_BUILD_DIR)/libfipc.install/include \
	-I$(LIBDEKER_BUILD_DIR)/libasync.install/include

LIBDEKER_BAD_CFLAGS= \
	-fno-delete-null-pointer-checks \
	-mpreferred-stack-boundary=3 \
	-maccumulate-outgoing-args \
	-fconserve-stack \
	-Wno-unused-but-set-variable \
	-mtune=generic \
	-DCC_HAVE_ASM_GOTO \
	-gdwarf-2

DEKER_KBUILD_CONFIG=$(LCD_DOMAINS_TOP_SRC_DIR)/scripts/Kbuild.deker_hacks

export LIBDEKER_CFLAGS LIBDEKER_BAD_CFLAGS DEKER_KBUILD_CONFIG

LIBDEKER_DIRS=$(shell cd libdeker && find . -mindepth 1 -type d)
LIBDEKER_DIRS:=$(foreach d,$(LIBDEKER_DIRS),libdeker/$(d))
LIBLCD_FOR_DEKER_DIRS=$(foreach d,$(LIBLCD_DIRS),liblcd_build/$(d))
LIBDEKER_DIRS:= \
	$(LIBDEKER_DIRS) \
	libcap.build \
	libcap.install \
	libfipc.build \
	libfipc.install \
	libasync.build \
	libasync.install \
	$(LIBLCD_FOR_DEKER_DIRS)
LIBDEKER_BUILD_DIRS=$(foreach dir,$(LIBDEKER_DIRS),\
	$(LIBDEKER_BUILD_DIR)/$(dir))

LIBDEKER_LIBCAP=$(LIBDEKER_BUILD_DIR)/libcap.install/lib/libcap.a
LIBDEKER_LIBFIPC=$(LIBDEKER_BUILD_DIR)/libfipc.install/lib/libfipc.a
LIBDEKER_LIBFIPC=$(LIBDEKER_BUILD_DIR)/libasync.install/lib/libasync.a

LIBDEKER_LIB_CFLAGS= $(LIBDEKER_BASE_CFLAGS)

# There isn't a nice easy way to multiline this, and I want access to the
# LIBDEKER_BUILD_DIR variable (so I don't want to create a separate file); so 
# I mash this in one line for now.
LIBLCD_FOR_DEKER_AR_SCRIPT="CREATE $(LIBDEKER_BUILD_DIR)/liblcd_build/liblcd.a\nADDLIB $(LIBDEKER_BUILD_DIR)/liblcd_build/lib.a\nADDLIB $(LIBDEKER_BUILD_DIR)/libcap.install/lib/libcap.a\nADDLIB $(LIBDEKER_BUILD_DIR)/libfipc.install/lib/libfipc.a\nADDLIB $(LIBDEKER_BUILD_DIR)/libasync.install/lib/libasync.a\nSAVE\nEND\n"

libdeker: $(LIBDEKER_BUILD_DIR)/lib.a
	cp $< $(LIBDEKER_BUILD_DIR)/libdeker.a

liblcd_for_deker: $(LIBDEKER_BUILD_DIR)/liblcd_build/lib.a | \
	$(LIBDEKER_LIBCAP) $(LIBDEKER_LIBFIPC) $(LIBDEKER_LIBASYNC)
	@echo "  AR      liblcd.a"
	@echo $(LIBLCD_FOR_DEKER_AR_SCRIPT) | ar -M

$(LIBDEKER_BUILD_DIR)/liblcd_build/lib.a: \
	$(LIBDEKER_BUILD_DIR)/liblcd_build/Kbuild | \
	$(LIBDEKER_LIBCAP) $(LIBDEKER_LIBFIPC) $(LIBDEKER_LIBASYNC)
	$(MAKE) -C .. M=$(LIBDEKER_BUILD_DIR)/liblcd_build $(MAKEFLAGS) \
	LIBLCD_CFLAGS="$(LIBDEKER_CFLAGS)"

$(LIBDEKER_BUILD_DIR)/liblcd_build/Kbuild: scripts/Kbuild.liblcd | \
	$(LIBDEKER_BUILD_DIRS)
	@echo "  KBUILD  $@"
	@printf "# This part is auto prepended by Makefile.libdeker:\n\n" > $@ && \
	printf 'include $$(DEKER_KBUILD_CONFIG)' >> $@ && \
	printf "\n# End of auto prepended part\n\n" >> $@ && \
	cat $< >> $@

$(LIBDEKER_BUILD_DIR)/lib.a: $(LIBDEKER_BUILD_DIR)/Kbuild \
	libdeker/smack.c | \
	$(LIBDEKER_BUILD_DIRS)
	$(MAKE) -C .. M=$(LIBDEKER_BUILD_DIR) $(MAKEFLAGS)

libdeker/smack.c: $(SMACK_LIB_PATH)/smack.c
	ln -s $< $@

libcap.libdeker: $(LIBDEKER_BUILD_DIR)/libcap.build/Makefile
	$(MAKE) -C $(LIBDEKER_BUILD_DIR)/libcap.build \
	CC=$(WLLVM_PATH) \
	CFLAGS="$(LIBDEKER_LIB_CFLAGS)" \
	LIBCAP_BAD_CFLAGS="$(LIBDEKER_BAD_CFLAGS)" \
	$(MAKEFLAGS) && \
	$(MAKE) -C $(LIBDEKER_BUILD_DIR)/libcap.build install $(MAKEFLAGS)

$(LIBDEKER_BUILD_DIR)/libcap.build/Makefile: libcap/configure | \
	$(LIBDEKER_BUILD_DIRS)
	cd $(LIBDEKER_BUILD_DIR)/libcap.build && \
	$(LCD_DOMAINS_TOP_SRC_DIR)/libcap/configure \
	PLATFORM=kernel --disable-test-build \
	--disable-kernel-module \
	--with-kernel-headers=$(LCD_DOMAINS_TOP_SRC_DIR)/.. \
	--prefix=$(LIBDEKER_BUILD_DIR)/libcap.install \
	CSPACE_DEPTH_BITS=$(LCD_CSPACE_DEPTH_BITS) \
	CSPACE_CNODE_TABLE_BITS=$(LCD_CSPACE_CNODE_TABLE_BITS) \
	CC=$(WLLVM_PATH)

libfipc.libdeker: $(LIBDEKER_BUILD_DIR)/libfipc.build/Makefile
	$(MAKE) -C $(LIBDEKER_BUILD_DIR)/libfipc.build \
	CC=$(WLLVM_PATH) \
	CFLAGS="$(LIBDEKER_LIB_CFLAGS) -I$(LIBDEKER_BUILD_DIR)/libcap.install/include" \
        LIBFIPC_BAD_CFLAGS="$(LIBDEKER_BAD_CFLAGS)" \
	$(MAKEFLAGS) && \
	$(MAKE) -C $(LIBDEKER_BUILD_DIR)/libfipc.build install $(MAKEFLAGS)

$(LIBDEKER_BUILD_DIR)/libfipc.build/Makefile: \
	libasync/fast-ipc-module/configure | \
	$(LIBDEKER_BUILD_DIRS)
	cd $(LIBDEKER_BUILD_DIR)/libfipc.build && \
	$(LCD_DOMAINS_TOP_SRC_DIR)/libasync/fast-ipc-module/configure \
	--with-kernel-headers=$(LCD_DOMAINS_TOP_SRC_DIR)/.. \
	--prefix=$(LIBDEKER_BUILD_DIR)/libfipc.install \
	CC=$(WLLVM_PATH)

libasync.libdeker: $(LIBDEKER_BUILD_DIR)/libasync.build/Makefile
	$(MAKE) -C $(LIBDEKER_BUILD_DIR)/libasync.build \
	CC=$(WLLVM_PATH) \
	CFLAGS="$(LIBDEKER_LIB_CFLAGS) -I$(LIBDEKER_BUILD_DIR)/libcap.install/include -I$(LIBDEKER_BUILD_DIR)/libfipc.install/include -DNDEBUG" \
        LIBASYNC_BAD_CFLAGS="$(LIBDEKER_BAD_CFLAGS)" \
	$(MAKEFLAGS) && \
	$(MAKE) -C $(LIBDEKER_BUILD_DIR)/libasync.build install $(MAKEFLAGS)

$(LIBDEKER_BUILD_DIR)/libasync.build/Makefile: libasync/configure | \
	$(LIBDEKER_BUILD_DIRS)
	cd $(LIBDEKER_BUILD_DIR)/libasync.build && \
	$(LCD_DOMAINS_TOP_SRC_DIR)/libasync/configure \
	--with-kernel-headers=$(LCD_DOMAINS_TOP_SRC_DIR)/.. \
	--with-libfipc=$(LIBDEKER_BUILD_DIR)/libfipc.install \
	--prefix=$(LIBDEKER_BUILD_DIR)/libasync.install \
	CC=$(WLLVM_PATH)

$(LIBDEKER_BUILD_DIR)/Kbuild: scripts/Kbuild.libdeker | \
	$(LIBDEKER_BUILD_DIRS)
	cp scripts/Kbuild.libdeker $(LIBDEKER_BUILD_DIR)/Kbuild

$(LIBDEKER_BUILD_DIRS):
	@echo "  MKDIR      $@"
	@mkdir -p $@

clean-libdeker: clean-libdeker-libcap clean-libdeker-libfipc \
                clean-libdeker-libasync
	if test -e $(LIBDEKER_BUILD_DIR)/Kbuild; then \
		$(MAKE) -C .. M=$(LIBDEKER_BUILD_DIR) clean; \
	fi
	if test -e $(LIBDEKER_BUILD_DIR)/liblcd_build/Kbuild; then \
		$(MAKE) -C .. M=$(LIBDEKER_BUILD_DIR)/liblcd_build clean; \
	fi
	rm -f $(LIBDEKER_BUILD_DIR)/libdeker.a
	rm -f $(LIBDEKER_BUILD_DIR)/libdeker.a.bc
	rm -f $(LIBDEKER_BUILD_DIR)/liblcd_build/liblcd.a
	rm -f $(LIBDEKER_BUILD_DIR)/liblcd_build/liblcd.a.bc
	rm -f libdeker/smack.c

clean-libdeker-lib%:
	if test -d $(LIBDEKER_BUILD_DIR)/$(subst clean-libdeker-,,$@).build; then \
		$(MAKE) -C $(LIBDEKER_BUILD_DIR)/$(subst clean-libdeker-,,$@).build clean; \
	fi
	rm -rf $(LIBDEKER_BUILD_DIR)/$(subst clean-libdeker-,,$@).install

clean: clean-libdeker

.PHONY: \
	libdeker \
	$(LIBDEKER_BUILD_DIR)/lib.a \
	liblcd_for_deker \
	$(LIBDEKER_BUILD_DIR)/liblcd_build/lib.a \
	libcap.libdeker \
	libfipc.libdeker \
	libasync.libdeker \
	clean-libdeker

