
========================================
OVERVIEW
========================================

The arch-independent code is in virt/lcd-domains. It is the arch-independent 
layer of the LCD microkernel.

The main objects are struct cspaces, struct lcds, struct endpoints, defined
in virt/lcd-domains/internal.h.

White and black box test cases are in virt/lcd-domains/tests. (These are just
included at the bottom of the corresponding source file, and the tests are
ran when the microkernel is loaded.)

struct lcd has an associated host kernel thread that is running inside
a hardware virtual machine. It contains a pointer to the lcd's utcb, some
status info, and a cspace. 

External code should use kliblcd to interact with the microkernel and create
lcd's; see Documentation/lcd-domains/kliblcd.txt.

See also the comments in the internal.h header and tests.

========================================
SETUP
========================================

Aside from building and installing the kernel code, you will need to do one
extra step, explained in detail below.

Background
----------

We don't want tricky logic for locating modules, so we want to re-use the
request_module facility in the kernel. But this relies on the user space
modprobe tools. So, we did the following:

   -- we modified the module loading code in the kernel so that a caller
      can safely load a module that is destined for an lcd in the host
      (modules destined for an lcd *will not* have their init code executed
      when installed in the host, nor their exit code executed when they
      are uninstalled from the host)
   -- we added an ioctl interface that user code can use to
      load a module destined for an lcd; it uses the patched module loading
      code
   -- we created a patched modprobe that uses this interface
   -- we patched request_module to allow kernel code to load a module
      destined for an lcd, using the patched modprobe

So, when you call lcd_create, the kernel loads the module using the patched
modprobe.

This means you need to have the patched modprobe properly installed!

Step 1
------

Build and install the kernel and all modules. In the root directory of the
kernel source,

    [ 1 ] make menuconfig

            -- go into Virtualization (2) and select Lightweight Capability
               Domains and Intel Support for LCDs
            -- it is recommended you build them as modules, for debugging
	    -- ** important ** : make sure you have these turned off:

	          -- KVM
	       	  -- stack protector (under Processor type and features)
                  -- tracing (under Kernel Hacking -> Tracing)
		   
               These should be off by default, but you might accidentally
               kick them on if you turn on some debug features. Tracing
	       may actually be OK to have on, I'm not completely sure. (Tracing
	       and the stack protector features affect how code is built,
	       which could be bad for liblcd code.)

    [ 2 ] exit and save the configuration

    [ 3 ] make

            -- use make -j 8 if e.g. you have 8 cores, will go faster

    [ 4 ] sudo make modules_install install

            -- order is important!
            -- this should automatically update the grub boot menu

    [ 5 ] sudo make headers_install INSTALL_HDR_PATH=/usr/include/temp


Step 2 - Patched Modprobe Setup
-------------------------------

The patched version is inside tools/module-init-tools.

To build and install, enter the module-init-tools directory,
and do the following:

       [ 1 ] aclocal -I m4 && automake --add-missing --copy && autoconf

       [ 2 ] ./configure --prefix=/ --program-prefix=lcd-

       [ 3 ] make

       [ 4 ] (sudo) make install

This will install the patched /sbin/lcd-modprobe and /sbin/lcd-insmod,
as well as the other init tools that were left untouched. The
request_module will use lcd-modprobe to load the module.

The man pages won't install on emulab (since /share is read only).
You can specify a different man dir via configure if you wish.

[Note: The only changes to init tools are in modprobe.c and insmod.c; only
the changes in modprobe.c are of interest (lcd-insmod is not currently
used/needed). Instead of doing the Linux init_module system call,
lcd-modprobe does an ioctl call to the LCD driver (hence, the LCD driver
must be loaded), with the bytes of the module, its size, and command
line options.]


Step 3 - Reboot and install
---------------------------

After rebooting the machine, select the new kernel to boot it.

After booting, if you built the lcd system as a module, do:

        sudo insmod ${MODULE_PATH}/virt/lcd-domains/lcd-domains.ko

where ${MODULE_PATH} is something like /lib/modules/3.10.14/kernel.

This will install the lcd system. You can also use modprobe.

You can now create an lcd using kliblcd. See 
Documentation/lcd-domains/kliblcd.txt.

