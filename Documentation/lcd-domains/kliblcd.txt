
========================================
OVERVIEW
========================================

The code is inside virt/lcd-domains/kliblcd.c. The header (for non-isolated
kernel code to use) is in include/lcd-domains/kliblcd.h.

A kernel thread can "enter/exit into lcd mode" (similar to cap_enter in
Capsicum) by invoking klcd_enter/klcd_exit. A kernel thread that has entered
lcd mode is called a *kernel lcd* or *klcd*. The functions you see with
klcd_ instead of lcd_ are only part of the kliblcd interface and only
available to non-isolated lcd's.

Upon entering lcd mode, a kernel thread can invoke the functions in the
kliblcd interface for creating lcd's, allocating pages, loading modules, etc.

A klcd has a cspace and utcb for message passing, but does not have an
underlying hardware vm (the thread runs unisolated).

See the kliblcd header for a detailed description of the interface. See the
test cases for examples.

========================================
LCD STATUS
========================================

An lcd can be in one of four states:

   E = Embryo       -  just after it is created, not configured with a starting
                       stack pointer, etc.
   C = Configured   -  stack pointer, starting program counter configured
   R = Running      -  kthread is runnable or running, and may be running 
                       inside vm
   D = Dead         -  kthread has stopped or will soon stop; lcd may be in
                       the process of being torn down

                                  _____________________________________
                                 /          lcd_destroy                \
                                |                                       |
          lcd_run               |            lcd_run, lcd_config        |
           .__.                 ^                .__.                   |
          |   |    .----------->|               |   |                   |
          \   |   / lcd_destroy |               \   |                   |
           \  |  /              ^                \  |                   |
            \ V /               |                 \ V                   V
   create  +---+  lcd_config  +---+   lcd_run    +---+  lcd_destroy   +---+
  -------->| E |------------->| C |------------->| R |--------------->| D |
           +---+           .->+---+              +---+                +---+
                          /   /                                        ^ \
                         /   /                                         |  \
                        /   /                                          |   \
                       '---'                                           '---'
                   lcd_config                                       lcd_run
                                                                    lcd_destroy
                                                                    lcd_config


The following transitions are an error (return non-zero), and have no effect:

    E: lcd_run                 -  you must configure the lcd first
    C: lcd_config              -  lcd already configured
    R: lcd_run, lcd_config     -  lcd already running and config'd
    D: all                     -  lcd is dead

Some of these may be too restrictive, and could change in the future (e.g.,
allow re-config).

========================================
CREATING AN LCD
========================================

This code is the most complicated part of kliblcd.c. We package up all of the
context and data for setting up a module LCD inside struct lcd_info. This
contains lists of pages we've mapped in the LCD, the temporary cptr
cache we're using to set up the LCD's cspace, and so on. This is done so
that we can properly boot the LCD and tear everything down later.

There are two main parts: loading the module and setting up the VM.

Loading the module happens in:

   lcd_load_module

Setting up the VM happens in:

   lcd_create_module_lcd

lcd_create_module_lcd loads the module and sets up the LCD's address space.
The caller can then finish the boot process by populating the boot info
pages for the LCD, providing it with endpoints, and so on.

See the examples in test-mods/ for usage.
